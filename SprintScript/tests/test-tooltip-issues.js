const puppeteer = require('puppeteer');
const path = require('path');
const sleep = (ms) => new Promise(res => setTimeout(res, ms));

(async () => {
  const EXTENSION_PATH = path.resolve(__dirname, '../');
  const browser = await puppeteer.launch({
    headless: false,
    args: [
      `--disable-extensions-except=${EXTENSION_PATH}`,
      `--load-extension=${EXTENSION_PATH}`,
    ],
  });

  const page = await browser.newPage();

  // Console logs da p√°gina para diagn√≥stico
  page.on('console', msg => {
    if (msg.text().includes('SprintScript') || msg.text().includes('tooltip')) {
      console.log('üîß PAGE LOG:', msg.text());
    }
  });

  const htmlContent = `
    <html>
      <head><title>Teste de Problemas de Tooltip</title></head>
      <body>
        <h1>Diagn√≥stico de Problemas de UX</h1>
        <textarea id="test-area" rows="5" cols="60" placeholder="Digite aqui..."></textarea>
        <input type="text" id="test-input" placeholder="Ou aqui..." />
        <div contenteditable="true" id="test-div" style="border: 1px solid #ccc; padding: 10px; min-height: 50px;">Ou edite aqui...</div>
      </body>
    </html>
  `;
  await page.setContent(htmlContent);
  await sleep(3000); // Aguarda a extens√£o carregar

  console.log("üîç INICIANDO DIAGN√ìSTICO DE PROBLEMAS DE TOOLTIP...\n");

  // Problema 1: Tooltip vazio aparecendo
  console.log("üìã TESTE 1: Tooltip vazio");
  console.log("‚ïê".repeat(50));
  
  await page.focus('#test-area');
  await page.type('#test-area', 'teste normal sem atalho');
  await sleep(1000);
  
  const tooltipExists = await page.evaluate(() => {
    const tooltip = document.getElementById('sprint-tooltip');
    return tooltip && tooltip.style.display !== 'none' && tooltip.style.opacity !== '0';
  });
  
  if (tooltipExists) {
    const tooltipContent = await page.evaluate(() => {
      const tooltip = document.getElementById('sprint-tooltip');
      return tooltip ? tooltip.innerHTML : 'N/A';
    });
    console.log("‚ùå PROBLEMA: Tooltip aparece mesmo sem atalho v√°lido");
    console.log("   Conte√∫do:", tooltipContent);
  } else {
    console.log("‚úÖ OK: Nenhum tooltip aparece para texto normal");
  }

  // Problema 2: Tooltip perseguindo o usu√°rio ap√≥s rejei√ß√£o
  console.log("\nüìã TESTE 2: Persist√™ncia ap√≥s rejei√ß√£o");
  console.log("‚ïê".repeat(50));
  
  // Limpa o campo
  await page.evaluate(() => {
    document.getElementById('test-area').value = '';
  });
  
  // Digita um atalho v√°lido (assumindo que 'brb' existe)
  await page.type('#test-area', 'brb');
  await sleep(1000);
  
  // Verifica se tooltip aparece
  let tooltipVisible = await page.evaluate(() => {
    const tooltip = document.getElementById('sprint-tooltip');
    return tooltip && tooltip.style.display !== 'none' && tooltip.style.opacity !== '0';
  });
  
  if (tooltipVisible) {
    console.log("‚úÖ Tooltip aparece para atalho v√°lido 'brb'");
    
    // Simula rejei√ß√£o (ESC ou bot√£o X)
    await page.keyboard.press('Escape');
    await sleep(500);
    
    // Verifica se tooltip some
    tooltipVisible = await page.evaluate(() => {
      const tooltip = document.getElementById('sprint-tooltip');
      return tooltip && tooltip.style.display !== 'none' && tooltip.style.opacity !== '0';
    });
    
    if (!tooltipVisible) {
      console.log("‚úÖ Tooltip some ap√≥s ESC");
      
      // Agora digita mais texto
      await page.type('#test-area', ' teste');
      await sleep(1000);
      
      // Verifica se tooltip volta a aparecer indevidamente
      tooltipVisible = await page.evaluate(() => {
        const tooltip = document.getElementById('sprint-tooltip');
        return tooltip && tooltip.style.display !== 'none' && tooltip.style.opacity !== '0';
      });
      
      if (tooltipVisible) {
        console.log("‚ùå PROBLEMA: Tooltip volta ap√≥s rejei√ß√£o quando usu√°rio continua digitando");
        const currentText = await page.evaluate(() => document.getElementById('test-area').value);
        console.log("   Texto atual:", currentText);
      } else {
        console.log("‚úÖ OK: Tooltip n√£o volta ap√≥s rejei√ß√£o");
      }
    } else {
      console.log("‚ùå PROBLEMA: Tooltip n√£o some ap√≥s ESC");
    }
  } else {
    console.log("‚ùå PROBLEMA: Tooltip n√£o aparece para atalho v√°lido");
  }

  // Problema 3: Tooltip aparecendo em p√°ginas sem atalhos configurados
  console.log("\nüìã TESTE 3: Tooltip em p√°ginas sem atalhos");
  console.log("‚ïê".repeat(50));
  
  // Simula cen√°rio sem atalhos
  await page.evaluate(() => {
    // Remove todos os atalhos do storage
    window.chrome = window.chrome || {};
    window.chrome.storage = window.chrome.storage || {};
    window.chrome.storage.sync = {
      get: (keys, callback) => callback({ shortcuts: {} }),
      set: (data, callback) => callback()
    };
  });
  
  await page.evaluate(() => {
    document.getElementById('test-area').value = '';
  });
  
  await page.type('#test-area', 'qualquer texto aqui brb teste');
  await sleep(1000);
  
  tooltipVisible = await page.evaluate(() => {
    const tooltip = document.getElementById('sprint-tooltip');
    return tooltip && tooltip.style.display !== 'none' && tooltip.style.opacity !== '0';
  });
  
  if (tooltipVisible) {
    console.log("‚ùå PROBLEMA: Tooltip aparece mesmo sem atalhos configurados");
  } else {
    console.log("‚úÖ OK: Nenhum tooltip sem atalhos configurados");
  }

  // Problema 4: M√∫ltiplos tooltips ou sobreposi√ß√£o
  console.log("\nüìã TESTE 4: M√∫ltiplos tooltips");
  console.log("‚ïê".repeat(50));
  
  const tooltipCount = await page.evaluate(() => {
    return document.querySelectorAll('[id*="tooltip"], [class*="tooltip"]').length;
  });
  
  console.log(`N√∫mero de elementos tooltip encontrados: ${tooltipCount}`);
  
  if (tooltipCount > 1) {
    console.log("‚ùå PROBLEMA: M√∫ltiplos tooltips detectados");
    const tooltips = await page.evaluate(() => {
      const elements = document.querySelectorAll('[id*="tooltip"], [class*="tooltip"]');
      return Array.from(elements).map(el => ({
        id: el.id,
        class: el.className,
        visible: el.style.display !== 'none'
      }));
    });
    console.log("   Tooltips encontrados:", tooltips);
  } else {
    console.log("‚úÖ OK: Apenas um tooltip encontrado");
  }

  // Problema 5: Performance - tooltip aparecendo muito rapidamente
  console.log("\nüìã TESTE 5: Performance de tooltip");
  console.log("‚ïê".repeat(50));
  
  const startTime = Date.now();
  await page.evaluate(() => {
    document.getElementById('test-area').value = '';
  });
  
  // Digita rapidamente v√°rios caracteres
  for (let i = 0; i < 10; i++) {
    await page.type('#test-area', 'a');
    await sleep(50); // Digita√ß√£o r√°pida
  }
  
  const endTime = Date.now();
  console.log(`Tempo de digita√ß√£o r√°pida: ${endTime - startTime}ms`);
  
  // Verifica se causou problemas
  const finalTooltipState = await page.evaluate(() => {
    const tooltip = document.getElementById('sprint-tooltip');
    return {
      exists: !!tooltip,
      visible: tooltip && tooltip.style.display !== 'none',
      content: tooltip ? tooltip.innerHTML.substring(0, 50) : null
    };
  });
  
  console.log("Estado final do tooltip:", finalTooltipState);

  // Problema 6: Limpeza de listeners
  console.log("\nüìã TESTE 6: Limpeza de event listeners");
  console.log("‚ïê".repeat(50));
  
  // Testa se os listeners s√£o removidos corretamente
  const listenerCount = await page.evaluate(() => {
    // Simula mudan√ßa de p√°gina/contexto
    const testElement = document.getElementById('test-area');
    
    // Conta quantos listeners est√£o attached (m√©todo aproximado)
    const events = [];
    for (let prop in testElement) {
      if (prop.startsWith('on') || prop.includes('event')) {
        events.push(prop);
      }
    }
    
    return {
      eventProps: events.length,
      hasSprintScriptListeners: !!window.SprintScript
    };
  });
  
  console.log("An√°lise de listeners:", listenerCount);

  console.log("\n" + "‚ïê".repeat(60));
  console.log("üèÅ DIAGN√ìSTICO CONCLU√çDO");
  console.log("‚ïê".repeat(60));
  
  console.log("\nüí° RECOMENDA√á√ïES BASEADAS NOS TESTES:");
  console.log("1. Verificar l√≥gica de exibi√ß√£o de tooltip em replace.js");
  console.log("2. Implementar debounce para evitar tooltips em digita√ß√£o r√°pida");
  console.log("3. Melhorar limpeza de estado ap√≥s rejei√ß√£o");
  console.log("4. Adicionar verifica√ß√£o se existem atalhos antes de mostrar tooltip");
  console.log("5. Implementar timeout para auto-hide do tooltip");

  await browser.close();
})();